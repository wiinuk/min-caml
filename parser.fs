// Implementation file for parser generated by fsyacc
#light "off"
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
open Microsoft.FSharp.Compatibility.OCaml.Parsing
# 1 "parser.mly"

(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())

# 14 "parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | RPAREN
  | LPAREN
  | SEMICOLON
  | LESS_MINUS
  | DOT
  | ARRAY_CREATE
  | COMMA
  | REC
  | IN
  | LET
  | IDENT of (Id.t)
  | ELSE
  | THEN
  | IF
  | GREATER
  | LESS
  | GREATER_EQUAL
  | LESS_EQUAL
  | LESS_GREATER
  | EQUAL
  | SLASH_DOT
  | AST_DOT
  | PLUS_DOT
  | MINUS_DOT
  | PLUS
  | MINUS
  | NOT
  | FLOAT of (float)
  | INT of (int)
  | BOOL of (bool)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_SEMICOLON
    | TOKEN_LESS_MINUS
    | TOKEN_DOT
    | TOKEN_ARRAY_CREATE
    | TOKEN_COMMA
    | TOKEN_REC
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_IDENT
    | TOKEN_ELSE
    | TOKEN_THEN
    | TOKEN_IF
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_GREATER_EQUAL
    | TOKEN_LESS_EQUAL
    | TOKEN_LESS_GREATER
    | TOKEN_EQUAL
    | TOKEN_SLASH_DOT
    | TOKEN_AST_DOT
    | TOKEN_PLUS_DOT
    | TOKEN_MINUS_DOT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_NOT
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_BOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startexp
    | NONTERM_simple_exp
    | NONTERM_exp
    | NONTERM_fundef
    | NONTERM_formal_args
    | NONTERM_actual_args
    | NONTERM_elems
    | NONTERM_pat

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | RPAREN  -> 1 
  | LPAREN  -> 2 
  | SEMICOLON  -> 3 
  | LESS_MINUS  -> 4 
  | DOT  -> 5 
  | ARRAY_CREATE  -> 6 
  | COMMA  -> 7 
  | REC  -> 8 
  | IN  -> 9 
  | LET  -> 10 
  | IDENT _ -> 11 
  | ELSE  -> 12 
  | THEN  -> 13 
  | IF  -> 14 
  | GREATER  -> 15 
  | LESS  -> 16 
  | GREATER_EQUAL  -> 17 
  | LESS_EQUAL  -> 18 
  | LESS_GREATER  -> 19 
  | EQUAL  -> 20 
  | SLASH_DOT  -> 21 
  | AST_DOT  -> 22 
  | PLUS_DOT  -> 23 
  | MINUS_DOT  -> 24 
  | PLUS  -> 25 
  | MINUS  -> 26 
  | NOT  -> 27 
  | FLOAT _ -> 28 
  | INT _ -> 29 
  | BOOL _ -> 30 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_RPAREN 
  | 2 -> TOKEN_LPAREN 
  | 3 -> TOKEN_SEMICOLON 
  | 4 -> TOKEN_LESS_MINUS 
  | 5 -> TOKEN_DOT 
  | 6 -> TOKEN_ARRAY_CREATE 
  | 7 -> TOKEN_COMMA 
  | 8 -> TOKEN_REC 
  | 9 -> TOKEN_IN 
  | 10 -> TOKEN_LET 
  | 11 -> TOKEN_IDENT 
  | 12 -> TOKEN_ELSE 
  | 13 -> TOKEN_THEN 
  | 14 -> TOKEN_IF 
  | 15 -> TOKEN_GREATER 
  | 16 -> TOKEN_LESS 
  | 17 -> TOKEN_GREATER_EQUAL 
  | 18 -> TOKEN_LESS_EQUAL 
  | 19 -> TOKEN_LESS_GREATER 
  | 20 -> TOKEN_EQUAL 
  | 21 -> TOKEN_SLASH_DOT 
  | 22 -> TOKEN_AST_DOT 
  | 23 -> TOKEN_PLUS_DOT 
  | 24 -> TOKEN_MINUS_DOT 
  | 25 -> TOKEN_PLUS 
  | 26 -> TOKEN_MINUS 
  | 27 -> TOKEN_NOT 
  | 28 -> TOKEN_FLOAT 
  | 29 -> TOKEN_INT 
  | 30 -> TOKEN_BOOL 
  | 33 -> TOKEN_end_of_input
  | 31 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startexp 
    | 1 -> NONTERM_simple_exp 
    | 2 -> NONTERM_simple_exp 
    | 3 -> NONTERM_simple_exp 
    | 4 -> NONTERM_simple_exp 
    | 5 -> NONTERM_simple_exp 
    | 6 -> NONTERM_simple_exp 
    | 7 -> NONTERM_simple_exp 
    | 8 -> NONTERM_exp 
    | 9 -> NONTERM_exp 
    | 10 -> NONTERM_exp 
    | 11 -> NONTERM_exp 
    | 12 -> NONTERM_exp 
    | 13 -> NONTERM_exp 
    | 14 -> NONTERM_exp 
    | 15 -> NONTERM_exp 
    | 16 -> NONTERM_exp 
    | 17 -> NONTERM_exp 
    | 18 -> NONTERM_exp 
    | 19 -> NONTERM_exp 
    | 20 -> NONTERM_exp 
    | 21 -> NONTERM_exp 
    | 22 -> NONTERM_exp 
    | 23 -> NONTERM_exp 
    | 24 -> NONTERM_exp 
    | 25 -> NONTERM_exp 
    | 26 -> NONTERM_exp 
    | 27 -> NONTERM_exp 
    | 28 -> NONTERM_exp 
    | 29 -> NONTERM_exp 
    | 30 -> NONTERM_exp 
    | 31 -> NONTERM_exp 
    | 32 -> NONTERM_exp 
    | 33 -> NONTERM_exp 
    | 34 -> NONTERM_fundef 
    | 35 -> NONTERM_formal_args 
    | 36 -> NONTERM_formal_args 
    | 37 -> NONTERM_actual_args 
    | 38 -> NONTERM_actual_args 
    | 39 -> NONTERM_elems 
    | 40 -> NONTERM_elems 
    | 41 -> NONTERM_pat 
    | 42 -> NONTERM_pat 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 33 
let _fsyacc_tagOfErrorTerminal = 31

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | SEMICOLON  -> "SEMICOLON" 
  | LESS_MINUS  -> "LESS_MINUS" 
  | DOT  -> "DOT" 
  | ARRAY_CREATE  -> "ARRAY_CREATE" 
  | COMMA  -> "COMMA" 
  | REC  -> "REC" 
  | IN  -> "IN" 
  | LET  -> "LET" 
  | IDENT _ -> "IDENT" 
  | ELSE  -> "ELSE" 
  | THEN  -> "THEN" 
  | IF  -> "IF" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | GREATER_EQUAL  -> "GREATER_EQUAL" 
  | LESS_EQUAL  -> "LESS_EQUAL" 
  | LESS_GREATER  -> "LESS_GREATER" 
  | EQUAL  -> "EQUAL" 
  | SLASH_DOT  -> "SLASH_DOT" 
  | AST_DOT  -> "AST_DOT" 
  | PLUS_DOT  -> "PLUS_DOT" 
  | MINUS_DOT  -> "MINUS_DOT" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | NOT  -> "NOT" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | BOOL _ -> "BOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | LESS_MINUS  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | ARRAY_CREATE  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ELSE  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GREATER_EQUAL  -> (null : System.Object) 
  | LESS_EQUAL  -> (null : System.Object) 
  | LESS_GREATER  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | SLASH_DOT  -> (null : System.Object) 
  | AST_DOT  -> (null : System.Object) 
  | PLUS_DOT  -> (null : System.Object) 
  | MINUS_DOT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 67us; 65535us; 0us; 10us; 1us; 14us; 2us; 10us; 3us; 14us; 11us; 12us; 17us; 10us; 18us; 10us; 19us; 14us; 20us; 14us; 23us; 10us; 24us; 14us; 25us; 10us; 26us; 14us; 27us; 14us; 28us; 14us; 29us; 14us; 30us; 14us; 31us; 14us; 32us; 14us; 33us; 14us; 34us; 14us; 35us; 14us; 36us; 14us; 37us; 14us; 38us; 14us; 39us; 14us; 40us; 14us; 41us; 14us; 42us; 14us; 43us; 14us; 44us; 14us; 45us; 14us; 46us; 14us; 47us; 14us; 48us; 14us; 49us; 14us; 50us; 14us; 51us; 14us; 52us; 14us; 53us; 10us; 54us; 10us; 55us; 10us; 56us; 10us; 57us; 10us; 58us; 10us; 59us; 10us; 60us; 10us; 61us; 10us; 62us; 10us; 63us; 10us; 64us; 10us; 65us; 10us; 66us; 10us; 67us; 10us; 68us; 10us; 71us; 10us; 72us; 10us; 75us; 10us; 76us; 13us; 81us; 10us; 82us; 10us; 83us; 10us; 84us; 10us; 85us; 11us; 89us; 10us; 92us; 10us; 93us; 10us; 32us; 65535us; 0us; 1us; 2us; 3us; 17us; 20us; 18us; 19us; 23us; 24us; 25us; 26us; 53us; 27us; 54us; 28us; 55us; 29us; 56us; 30us; 57us; 31us; 58us; 32us; 59us; 33us; 60us; 34us; 61us; 35us; 62us; 36us; 63us; 37us; 64us; 38us; 65us; 39us; 66us; 40us; 67us; 41us; 68us; 42us; 71us; 43us; 72us; 44us; 75us; 45us; 81us; 46us; 82us; 47us; 83us; 48us; 84us; 49us; 89us; 50us; 92us; 51us; 93us; 52us; 1us; 65535us; 73us; 74us; 2us; 65535us; 87us; 88us; 90us; 91us; 32us; 65535us; 1us; 76us; 3us; 76us; 19us; 76us; 20us; 76us; 24us; 76us; 26us; 76us; 27us; 76us; 28us; 76us; 29us; 76us; 30us; 76us; 31us; 76us; 32us; 76us; 33us; 76us; 34us; 76us; 35us; 76us; 36us; 76us; 37us; 76us; 38us; 76us; 39us; 76us; 40us; 76us; 41us; 76us; 42us; 76us; 43us; 76us; 44us; 76us; 45us; 76us; 46us; 76us; 47us; 76us; 48us; 76us; 49us; 76us; 50us; 76us; 51us; 76us; 52us; 76us; 32us; 65535us; 0us; 77us; 2us; 77us; 17us; 77us; 18us; 77us; 23us; 77us; 25us; 77us; 53us; 77us; 54us; 77us; 55us; 77us; 56us; 77us; 57us; 77us; 58us; 77us; 59us; 77us; 60us; 77us; 61us; 77us; 62us; 77us; 63us; 77us; 64us; 77us; 65us; 77us; 66us; 77us; 67us; 77us; 68us; 77us; 71us; 77us; 72us; 77us; 75us; 77us; 81us; 77us; 82us; 77us; 83us; 77us; 84us; 77us; 89us; 77us; 92us; 77us; 93us; 77us; 1us; 65535us; 78us; 79us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 69us; 102us; 104us; 107us; 140us; 173us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 16us; 0us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 2us; 1us; 2us; 16us; 1us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 3us; 7us; 8us; 30us; 2us; 7us; 32us; 2us; 7us; 32us; 2us; 7us; 37us; 2us; 7us; 38us; 1us; 7us; 2us; 7us; 30us; 1us; 7us; 2us; 7us; 30us; 17us; 7us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 30us; 31us; 40us; 16us; 7us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 1us; 7us; 2us; 7us; 30us; 1us; 9us; 16us; 9us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 1us; 10us; 16us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 16us; 11us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 16us; 11us; 12us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 20us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 22us; 23us; 24us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 23us; 24us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 24us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 25us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 25us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 26us; 27us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 29us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 29us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 30us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 31us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 34us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 39us; 40us; 16us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 24us; 27us; 31us; 40us; 40us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 3us; 25us; 26us; 29us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 26us; 2us; 27us; 37us; 2us; 28us; 39us; 1us; 29us; 2us; 29us; 41us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 34us; 2us; 35us; 36us; 1us; 35us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 42us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 19us; 22us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 55us; 58us; 61us; 64us; 67us; 69us; 72us; 74us; 77us; 95us; 112us; 114us; 117us; 119us; 136us; 138us; 155us; 172us; 189us; 206us; 223us; 240us; 257us; 274us; 291us; 308us; 325us; 342us; 359us; 376us; 393us; 410us; 427us; 444us; 461us; 478us; 495us; 512us; 529us; 546us; 563us; 580us; 597us; 599us; 601us; 603us; 605us; 607us; 609us; 611us; 613us; 615us; 617us; 619us; 621us; 623us; 625us; 627us; 629us; 633us; 635us; 637us; 639us; 641us; 643us; 645us; 648us; 651us; 653us; 656us; 658us; 660us; 662us; 664us; 666us; 668us; 670us; 672us; 674us; 676us; 679us; 681us; 683us; 685us; 687us; 689us; 691us; 693us; |]
let _fsyacc_action_rows = 99
let _fsyacc_actionTableElements = [|12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 19us; 49152us; 2us; 2us; 3us; 84us; 7us; 93us; 11us; 9us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 13us; 32768us; 1us; 5us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 20us; 32768us; 1us; 4us; 2us; 2us; 3us; 84us; 7us; 93us; 11us; 9us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 1us; 16392us; 5us; 16us; 6us; 32768us; 2us; 2us; 5us; 15us; 11us; 9us; 28us; 8us; 29us; 7us; 30us; 6us; 1us; 16416us; 5us; 15us; 1us; 16421us; 5us; 15us; 1us; 16422us; 5us; 15us; 1us; 32768us; 2us; 17us; 1us; 32768us; 2us; 18us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 20us; 32768us; 1us; 22us; 2us; 2us; 3us; 84us; 7us; 93us; 11us; 9us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 20us; 32768us; 1us; 21us; 2us; 2us; 3us; 84us; 7us; 93us; 11us; 9us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 0us; 16391us; 1us; 16391us; 4us; 83us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 5us; 16393us; 2us; 2us; 11us; 9us; 28us; 8us; 29us; 7us; 30us; 6us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 5us; 16394us; 2us; 2us; 11us; 9us; 28us; 8us; 29us; 7us; 30us; 6us; 7us; 16395us; 2us; 2us; 11us; 9us; 21us; 68us; 22us; 67us; 28us; 8us; 29us; 7us; 30us; 6us; 7us; 16396us; 2us; 2us; 11us; 9us; 21us; 68us; 22us; 67us; 28us; 8us; 29us; 7us; 30us; 6us; 11us; 16397us; 2us; 2us; 11us; 9us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 11us; 16398us; 2us; 2us; 11us; 9us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 11us; 16399us; 2us; 2us; 11us; 9us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 11us; 16400us; 2us; 2us; 11us; 9us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 11us; 16401us; 2us; 2us; 11us; 9us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 11us; 16402us; 2us; 2us; 11us; 9us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 20us; 32768us; 2us; 2us; 3us; 84us; 7us; 93us; 11us; 9us; 13us; 62us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 20us; 32768us; 2us; 2us; 3us; 84us; 7us; 93us; 11us; 9us; 12us; 63us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 18us; 16403us; 2us; 2us; 7us; 93us; 11us; 9us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 5us; 16404us; 2us; 2us; 11us; 9us; 28us; 8us; 29us; 7us; 30us; 6us; 7us; 16405us; 2us; 2us; 11us; 9us; 21us; 68us; 22us; 67us; 28us; 8us; 29us; 7us; 30us; 6us; 7us; 16406us; 2us; 2us; 11us; 9us; 21us; 68us; 22us; 67us; 28us; 8us; 29us; 7us; 30us; 6us; 5us; 16407us; 2us; 2us; 11us; 9us; 28us; 8us; 29us; 7us; 30us; 6us; 5us; 16408us; 2us; 2us; 11us; 9us; 28us; 8us; 29us; 7us; 30us; 6us; 20us; 32768us; 2us; 2us; 3us; 84us; 7us; 93us; 9us; 72us; 11us; 9us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 19us; 16409us; 2us; 2us; 3us; 84us; 7us; 93us; 11us; 9us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 19us; 16410us; 2us; 2us; 3us; 84us; 7us; 93us; 11us; 9us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 20us; 32768us; 2us; 2us; 3us; 84us; 7us; 93us; 9us; 82us; 11us; 9us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 19us; 16413us; 2us; 2us; 3us; 84us; 7us; 93us; 11us; 9us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 18us; 16414us; 2us; 2us; 7us; 93us; 11us; 9us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 19us; 16415us; 2us; 2us; 3us; 84us; 7us; 93us; 11us; 9us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 19us; 16418us; 2us; 2us; 3us; 84us; 7us; 93us; 11us; 9us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 17us; 16423us; 2us; 2us; 11us; 9us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 17us; 16424us; 2us; 2us; 11us; 9us; 15us; 58us; 16us; 57us; 17us; 60us; 18us; 59us; 19us; 56us; 20us; 55us; 21us; 68us; 22us; 67us; 23us; 65us; 24us; 66us; 25us; 53us; 26us; 54us; 28us; 8us; 29us; 7us; 30us; 6us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 3us; 32768us; 2us; 78us; 8us; 73us; 11us; 70us; 1us; 32768us; 20us; 71us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 1us; 32768us; 11us; 87us; 1us; 32768us; 9us; 75us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 5us; 16411us; 2us; 2us; 11us; 9us; 28us; 8us; 29us; 7us; 30us; 6us; 1us; 16412us; 7us; 92us; 1us; 32768us; 11us; 96us; 2us; 32768us; 1us; 80us; 7us; 94us; 1us; 32768us; 20us; 81us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 5us; 32768us; 2us; 2us; 11us; 9us; 28us; 8us; 29us; 7us; 30us; 6us; 0us; 16417us; 1us; 32768us; 11us; 90us; 1us; 32768us; 20us; 89us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 1us; 16420us; 11us; 90us; 0us; 16419us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 12us; 32768us; 2us; 2us; 6us; 85us; 10us; 69us; 11us; 9us; 14us; 61us; 24us; 64us; 26us; 25us; 27us; 23us; 28us; 8us; 29us; 7us; 30us; 6us; 31us; 86us; 1us; 32768us; 11us; 95us; 0us; 16425us; 1us; 32768us; 7us; 97us; 1us; 32768us; 11us; 98us; 0us; 16426us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 13us; 33us; 47us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 76us; 83us; 85us; 87us; 89us; 91us; 93us; 106us; 119us; 140us; 161us; 162us; 164us; 177us; 183us; 196us; 202us; 210us; 218us; 230us; 242us; 254us; 266us; 278us; 290us; 311us; 332us; 351us; 357us; 365us; 373us; 379us; 385us; 406us; 426us; 446us; 467us; 487us; 506us; 526us; 546us; 564us; 582us; 595us; 608us; 621us; 634us; 647us; 660us; 673us; 686us; 699us; 712us; 725us; 738us; 751us; 764us; 777us; 790us; 794us; 796us; 809us; 822us; 824us; 826us; 839us; 845us; 847us; 849us; 852us; 854us; 867us; 880us; 893us; 906us; 912us; 913us; 915us; 917us; 930us; 932us; 933us; 946us; 959us; 961us; 962us; 964us; 966us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 3us; 2us; 1us; 1us; 1us; 1us; 5us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 6us; 2us; 3us; 3us; 3us; 3us; 6us; 5us; 2us; 1us; 8us; 7us; 3us; 3us; 1us; 4us; 2us; 1us; 2us; 1us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; |]
let _fsyacc_immediateActions = [|65535us; 65535us; 65535us; 65535us; 16385us; 16386us; 16387us; 16388us; 16389us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 65535us; 16419us; 65535us; 65535us; 65535us; 16425us; 65535us; 65535us; 16426us; |]
let _fsyacc_reductions ()  =    [| 
# 298 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startexp));
# 308 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "parser.mly"
                           _2 
                   )
# 61 "parser.mly"
                 : 'simple_exp));
# 320 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "parser.mly"
                           Unit 
                   )
# 63 "parser.mly"
                 : 'simple_exp));
# 331 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "parser.mly"
                           Bool(_1) 
                   )
# 65 "parser.mly"
                 : 'simple_exp));
# 343 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "parser.mly"
                           Int(_1) 
                   )
# 67 "parser.mly"
                 : 'simple_exp));
# 355 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "parser.mly"
                           Float(_1) 
                   )
# 69 "parser.mly"
                 : 'simple_exp));
# 367 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Id.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "parser.mly"
                           Var(_1) 
                   )
# 71 "parser.mly"
                 : 'simple_exp));
# 379 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "parser.mly"
                           Get(_1, _4) 
                   )
# 73 "parser.mly"
                 : 'simple_exp));
# 392 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "parser.mly"
                           _1 
                   )
# 77 "parser.mly"
                 : Syntax.t));
# 404 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "parser.mly"
                           Not(_2) 
                   )
# 80 "parser.mly"
                 : Syntax.t));
# 416 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "parser.mly"
                           match _2 with
                         | Float(f) -> Float(-f) (* -1.23などは型エラーではないので別扱い *)
                         | e -> Neg(e) 
                   )
# 83 "parser.mly"
                 : Syntax.t));
# 430 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "parser.mly"
                           Add(_1, _3) 
                   )
# 87 "parser.mly"
                 : Syntax.t));
# 443 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "parser.mly"
                           Sub(_1, _3) 
                   )
# 89 "parser.mly"
                 : Syntax.t));
# 456 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "parser.mly"
                           Eq(_1, _3) 
                   )
# 91 "parser.mly"
                 : Syntax.t));
# 469 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "parser.mly"
                           Not(Eq(_1, _3)) 
                   )
# 93 "parser.mly"
                 : Syntax.t));
# 482 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "parser.mly"
                           Not(LE(_3, _1)) 
                   )
# 95 "parser.mly"
                 : Syntax.t));
# 495 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "parser.mly"
                           Not(LE(_1, _3)) 
                   )
# 97 "parser.mly"
                 : Syntax.t));
# 508 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "parser.mly"
                           LE(_1, _3) 
                   )
# 99 "parser.mly"
                 : Syntax.t));
# 521 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "parser.mly"
                           LE(_3, _1) 
                   )
# 101 "parser.mly"
                 : Syntax.t));
# 534 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "parser.mly"
                           If(_2, _4, _6) 
                   )
# 104 "parser.mly"
                 : Syntax.t));
# 548 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "parser.mly"
                           FNeg(_2) 
                   )
# 107 "parser.mly"
                 : Syntax.t));
# 560 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "parser.mly"
                           FAdd(_1, _3) 
                   )
# 109 "parser.mly"
                 : Syntax.t));
# 573 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "parser.mly"
                           FSub(_1, _3) 
                   )
# 111 "parser.mly"
                 : Syntax.t));
# 586 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "parser.mly"
                           FMul(_1, _3) 
                   )
# 113 "parser.mly"
                 : Syntax.t));
# 599 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "parser.mly"
                           FDiv(_1, _3) 
                   )
# 115 "parser.mly"
                 : Syntax.t));
# 612 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Id.t)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "parser.mly"
                           Let(addtyp _2, _4, _6) 
                   )
# 118 "parser.mly"
                 : Syntax.t));
# 626 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundef)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "parser.mly"
                           LetRec(_3, _5) 
                   )
# 121 "parser.mly"
                 : Syntax.t));
# 639 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'actual_args)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "parser.mly"
                           App(_1, _2) 
                   )
# 124 "parser.mly"
                 : Syntax.t));
# 652 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'elems)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "parser.mly"
                           Tuple(_1) 
                   )
# 126 "parser.mly"
                 : Syntax.t));
# 664 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'pat)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "parser.mly"
                           LetTuple(_3, _6, _8) 
                   )
# 128 "parser.mly"
                 : Syntax.t));
# 678 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "parser.mly"
                           Put(_1, _4, _7) 
                   )
# 130 "parser.mly"
                 : Syntax.t));
# 692 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "parser.mly"
                           Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) 
                   )
# 132 "parser.mly"
                 : Syntax.t));
# 705 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "parser.mly"
                           Array(_2, _3) 
                   )
# 135 "parser.mly"
                 : Syntax.t));
# 718 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "parser.mly"
                           failwith
                     	(Printf.sprintf "parse error near characters %d-%d"
                     	   (Parsing.symbol_start ())
                     	   (Parsing.symbol_end ())) 
                   )
# 137 "parser.mly"
                 : Syntax.t));
# 732 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Id.t)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'formal_args)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "parser.mly"
                           { name = addtyp _1; args = _2; body = _4 } 
                   )
# 144 "parser.mly"
                 : 'fundef));
# 746 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Id.t)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'formal_args)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "parser.mly"
                           addtyp _1 :: _2 
                   )
# 148 "parser.mly"
                 : 'formal_args));
# 759 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Id.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "parser.mly"
                           [addtyp _1] 
                   )
# 150 "parser.mly"
                 : 'formal_args));
# 771 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'actual_args)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "parser.mly"
                           _1 @ [_2] 
                   )
# 155 "parser.mly"
                 : 'actual_args));
# 784 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "parser.mly"
                           [_1] 
                   )
# 158 "parser.mly"
                 : 'actual_args));
# 796 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'elems)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "parser.mly"
                           _1 @ [_3] 
                   )
# 162 "parser.mly"
                 : 'elems));
# 809 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "parser.mly"
                           [_1; _3] 
                   )
# 164 "parser.mly"
                 : 'elems));
# 822 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'pat)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Id.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "parser.mly"
                           _1 @ [addtyp _3] 
                   )
# 168 "parser.mly"
                 : 'pat));
# 835 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Parsing.set_parse_state parseState;
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Id.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Id.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "parser.mly"
                           [addtyp _1; addtyp _3] 
                   )
# 170 "parser.mly"
                 : 'pat));
|]
# 849 "parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 34;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let exp lexer lexbuf : Syntax.t =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
